name: Deploy Spring Boot Application to AWS EC2 (Dev Environment)

on:
  push:
    branches: [ EB-75 ]

env:
  BUCKET_NAME: edubill-dev
  ecr_registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ecr_repository: edubill_dev
  image_name: edubill-dev-api
  image_tag: 0.0.1

jobs:
  build:
    name: CD
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Create dev/.env file
        run: |
          mkdir -p dev/scripts
          touch dev/scripts/.env
          echo "SPRING_PROFILE=dev" > dev/scripts/.env
          echo "EDUBILL_DB_HOST=${{ secrets.EDUBILL_DEV_DB_HOST }}" >> dev/scripts/.env
          echo "EDUBILL_DB_USER=${{ secrets.EDUBILL_DEV_DB_USER }}" >> dev/scripts/.env
          echo "EDUBILL_DB_PASSWORD=${{ secrets.EDUBILL_DEV_DB_PASSWORD }}" >> dev/scripts/.env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> dev/scripts/.env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> dev/scripts/.env
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> dev/scripts/.env

      - name: Verify .env file
        run: cat dev/scripts/.env

      - name: Copy .env to build context
        run: cp dev/scripts/.env .

      - name: Build and Push Docker image for dev profile
        run: |
          docker build \
            --build-arg JAR_FILE=build/libs/edubillApi-0.0.1-SNAPSHOT.jar \
            -t ${{ env.image_name }}:${{ env.image_tag }} .

          docker tag ${{ env.image_name }}:${{ env.image_tag }} ${{ env.ecr_registry }}/${{ env.ecr_repository }}:${{ env.image_tag }}
          docker push ${{ env.ecr_registry }}/${{ env.ecr_repository }}:${{ env.image_tag }}

      - name: Create deployment script
        run: |
          mkdir -p dev/scripts
          touch dev/scripts/start.sh
          echo "#!/bin/bash" > dev/scripts/start.sh
          echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.ecr_registry }}" >> dev/scripts/start.sh
          echo "docker pull ${{ env.ecr_registry }}/${{ env.ecr_repository }}:${{ env.image_tag }}" >> dev/scripts/start.sh
          echo "docker run -d --restart always -p 8081:8081 --name ${{ env.image_name }} \\" >> dev/scripts/start.sh
          echo "  --env-file /home/ubuntu/dev/action/scripts/.env \\" >> dev/scripts/start.sh
          echo "  ${{ env.ecr_registry }}/${{ env.ecr_repository }}:${{ env.image_tag }}" >> dev/scripts/start.sh
          chmod +x dev/scripts/start.sh

      - name: Upload deployment zip to S3
        env:
          GITHUB_SHA: ${{ github.sha }}
          file_name: edubill-api
          file_tag: dev
        run: |
          zip -r $file_name-$file_tag.zip ./scripts appspec.yml
          aws s3 cp $file_name-$file_tag.zip s3://$BUCKET_NAME/deploy/$GITHUB_SHA.zip --region ap-northeast-2

      - name: Code Deploy
        run: |
          aws deploy create-deployment --application-name edubill-dev \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name edubill-dev \
          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=deploy/$GITHUB_SHA.zip
